<meta name="viewport" content="width=device-width, initial-scale=1">
<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">
<%= javascript_include_tag "https://www.gstatic.com/charts/loader.js" %>
<div id="tasks" data-url="<%= @project.id %>"></div>


<div class="col12">
  <h1><%= @project.name %></h1><br />
  <h2>summary</h2>
  <h3>id number: <%= @project.id %></h3>
  <h3>description: <%= @project.description %></h3>
  <h3>status: <%= @project.status %></h3>
  <br /><br /><br />

  <% single_task = "" %>

  <!-- initialise project start/end date as today, set to endpoint due date below -->
  <% project_end_date = Date.today %>
  <% project_start_date = Date.today %>

  <h2>existing tasks for project</h2><br />
  <% dep_map = [] %>
  <% @project.tasks.each do |task| %>
    <% if is_endpoint(task) %>
      <% dep_map = build_dependencies_from(task) %>
      <% single_task = task %>
      <!-- end date set as endpoint due date, start date too as holder then set to earliest start below  -->
      <% project_end_date = task.due_date %>
      <% project_start_date = task.due_date %>
      <!-- insert in here exit point try break from .each loop -->
    <% end %>
  <% end %>
  
  
    <!--  if there are no dependencies this means there is one task and must be endpoint
          where we have dependencies construct grid onto which we'll plot tasks
     -->
    <% if dep_map.count > 1 %> 

      <!-- <% get_unique_paths(dep_map, false) %>  -->
      <% horizontally_sorted = arrange_dependencies_from(dep_map) %> 
      <% vertically_sorted = get_unique_paths(dep_map, false) %>
      <%= tag :meta, :name=> 'sorted_tasks_old', :content=> vertically_sorted.to_json %>


      <!-- examine each task at start of a path through project, get earliest start date -->
      <% horizontally_sorted.each do |task| %>
         <% if task[1] == 0 %>
          <% this_task_start_date = calculate_task_start_date(task[0].due_date,task[0].duration,false) %>
          <% if this_task_start_date < project_start_date %>
            <% project_start_date = this_task_start_date %>
          <% end %>
        <% end %>
      <% end %>
      <% project_start_date %>
      <% project_end_date %>
      <% duration = project_duration(project_end_date, project_start_date) %>

      <div class="w3-row w3-container">
        <!-- tasks -->
        <% xyz = [] %>
        <% horizontally_sorted.each do |atask| %>
          <% path = '/orgs/'+@project.org_id.to_s+'/projects/'+@project.id.to_s+'/tasks/'+atask[0].id.to_s %>
          <% user = User.where(:id => atask[0].user_id).first %>
          <% xyz.push([atask[0].title, format_date_for_chart_from(calculate_task_start_date(atask[0].due_date,atask[0].duration,false)), format_date_for_chart_from(atask[0].due_date), atask[0].status, atask[0].id, path, user.first_name]) %>
        <% end %>
        <%= tag :meta, :name=> 'sorted_tasks', :content=> xyz.to_json %>
      </div>


    <% else %>
      <%= link_to single_task.id, org_project_task_path(current_user.org, @project.id, single_task.id), class: 'nav-link' %>
    <% end %>

    <div class="w3-row w3-container">
      <div id="timeline" style="width: 100%; height: 100%;"></div>
    </div>
  
  <br /><br />

  <br /><br />
  

  <%= link_to 'create new task', new_org_project_task_path(current_user.org_id,@project.id), class: 'btn btn-success' %>
  <%= link_to 'back to my projects', org_path(current_user.org_id), class: 'btn btn-success' %>
  <%= link_to 'edit this project', edit_org_project_path(current_user.org_id, @project), class: 'btn btn-success' %>
</div>



    <script type="text/javascript">

      $(document).ready(function () {
        $(window).resize(function(){
            drawChart();
        });
      });


      google.charts.load('current', {'packages':['timeline']});
      google.charts.setOnLoadCallback(drawChart);


      function drawChart() {
        var container = document.getElementById('timeline');
        var chart = new google.visualization.Timeline(container);
        var dataTable = new google.visualization.DataTable();
        let jsonDataTasks = $('meta[name=sorted_tasks]').attr('content');
        let tasks = JSON.parse(jsonDataTasks);
        
       // console.log(tasks);
       
        tasks_for_display = [];
        for (index = 0; index < tasks.length; ++index) {
          var barcolor = ''
          if (tasks[index][3] == "ACP") {
            barColor = 'green'
          } else {
            barColor = 'red'
          }
          
          tasks_for_display.push([ tasks[index][0], tasks[index][6], barColor, new Date(tasks[index][1]), new Date(tasks[index][2]) ]);
        };
      


  //      boilerPlate = [
  //      [ 'Washington', new Date(1789, 3, 30), new Date(1797, 2, 4) ],
  //      [ 'Anus',      new Date(1797, 2, 4),  new Date(1801, 2, 4) ],
  //      [ 'Jefferson',  new Date(1801, 2, 4),  new Date(1809, 2, 4) ]];

        
        dataTable.addColumn({ type: 'string', id: 'Role' });
        dataTable.addColumn({ type: 'string', id: 'Name' });
        dataTable.addColumn({ type: 'string', role: 'style' });
        dataTable.addColumn({ type: 'date', id: 'Start' });
        dataTable.addColumn({ type: 'date', id: 'End' });
        dataTable.addRows(tasks_for_display);

        //calc the height for the overall chart
        var rowHeight = 41;
        var chartHeight = dataTable.getNumberOfRows() * rowHeight + 50;

        options = {
          height: chartHeight
        }

        var chart = new google.visualization.Timeline(document.getElementById('timeline'));

        chart.draw(dataTable, options);
        adjustChartDisplay(container)

          var handler = function(e) {
            let sel = chart.getSelection();
            let row = (sel[0].row);

            document.location.href = tasks[row][5];


          }
          google.visualization.events.addListener(chart, 'select', handler);


      }


      function adjustChartDisplay(container) {
      // chartElements = container.firstChild.firstChild.firstChild.firstChild.children[1].firstChild.children[1].children;


      chartElements = container.firstChild.firstChild.firstChild.firstChild.children[1].children;

        console.log(chartElements);

        for (var i = 0; i < chartElements.length; i++) {
          var element = chartElements[i];
          // var str = ''+element+''.substring(2,3);
          identifier = element.getAttribute('stroke-width');
          fillColor = element.getAttribute('fill');
          strokeColor = element.getAttribute('stroke');

          
          if (identifier == 0 && fillColor == "#e6e6e6" ) {
            element.setAttribute('fill', '#ffffff');
          }

          if (identifier == 1 && strokeColor == "#e6e6e6") {
            element.setAttribute('stroke', '#ffffff');
          }


          //console.log(element.getAttribute('fill'));

          
        }

        var element = chartElements[0];

        


        
      }




    </script>